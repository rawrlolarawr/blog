{"pageProps":{"frontMatter":{"title":"The React Redux Circle of Life","date":"Mar 24th, 2021","description":"Lifecycles of React and Redux","tags":["functions","javascript"]},"slug":"2021-03-24-the_react-redux_circle_of_life","mdxSource":{"compiledSource":"var u=Object.defineProperty,c=Object.defineProperties;var l=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var i=(e,t,a)=>t in e?u(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,s=(e,t)=>{for(var a in t||(t={}))r.call(t,a)&&i(e,a,t[a]);if(o)for(var a of o(t))p.call(t,a)&&i(e,a,t[a]);return e},d=(e,t)=>c(e,l(t));var h=(e,t)=>{var a={};for(var n in e)r.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(e!=null&&o)for(var n of o(e))t.indexOf(n)<0&&p.call(e,n)&&(a[n]=e[n]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var n=a,{components:e}=n,t=h(n,[\"components\"]);return mdx(MDXLayout,d(s(s({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"React and Redux together make an undisputed pair for a web app combining reusable components and a global state manager.\"),mdx(\"p\",null,\"Let's take a few moments to understand how this cycle works and how this created a wonderful flow for your web apps\"),mdx(\"p\",null,`When the app is started Redux is used at the top level. As the app is started Redux uses\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"createStore()\"),\" this creates a global object that holds the state of the application. This global object can be accessed throughout the app as long as your component is hooked up with the \",mdx(\"inlineCode\",{parentName:\"p\"},\"connect()\"),\" function.\"),mdx(\"p\",null,\"As the state is updated then the UI or user interface is updated as well rendering the current data from the Redux Store. On this level when a user updates the state it then calls an Action creator that will return an Action to the reducer. Generally actions are objects made up of a type and payload.\"),mdx(\"p\",null,\"When the action is passed to the reducer the type will determine which function is used to update the state. This is generally done with a switch statement. The reducer will return a new state which is then saved to the Redux store.\"),mdx(\"p\",null,\"Now as previously stated when the Redux Store is updated this in turn updates the UI and starts the cycle over again. This creates an environment for your app to only update when needed and keep the app rendering the new state or data presented.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}