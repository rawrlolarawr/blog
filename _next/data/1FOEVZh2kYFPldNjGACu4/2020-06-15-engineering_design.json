{"pageProps":{"frontMatter":{"title":"Engineering Design","date":"June 15th, 2020","description":"Front end design","tags":["functions","javascript"]},"slug":"2020-06-15-engineering_design","mdxSource":{"compiledSource":"var h=Object.defineProperty,c=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var d=(e,a,t)=>a in e?h(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,n=(e,a)=>{for(var t in a||(a={}))r.call(a,t)&&d(e,t,a[t]);if(i)for(var t of i(a))s.call(a,t)&&d(e,t,a[t]);return e},p=(e,a)=>c(e,m(a));var l=(e,a)=>{var t={};for(var o in e)r.call(e,o)&&a.indexOf(o)<0&&(t[o]=e[o]);if(e!=null&&i)for(var o of i(e))a.indexOf(o)<0&&s.call(e,o)&&(t[o]=e[o]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var o=t,{components:e}=o,a=l(o,[\"components\"]);return mdx(MDXLayout,p(n(n({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"If you are reading this I can only assume you are and engineer and design is the bane of your existence. Welcome to my Sinatra web app where design was an implied requirement.\"),mdx(\"p\",null,\"Luckily there are many frameworks such as bootstrap that can help you through designing the looks of your application. However, to try and get a better grasp of \",mdx(\"em\",{parentName:\"p\"},\"being creative\"),\" I decided to skip the framework and use vanilla css to get my app how I wanted.\"),mdx(\"p\",null,\"To build my app I used a gem made by a Flatiron graduate called Corneal which gave me my file system and a basic barebones app to build off of. When I started to style my app I noticed there was a file in my stylesheets already. I figured that this was it I don't need anymore design to go into this. However, I was wrong so I had to dip my feet into CSS.\"),mdx(\"p\",null,\"The gem gave me 2 breakpoints one for the screen and one if the screen is under 600px. This was using \",mdx(\"inlineCode\",{parentName:\"p\"},\"@media screen\"),\" do determine the size of the screen the app was using from there it gave me some reset styles and the rest was up to me.\"),mdx(\"p\",null,\"Fortunately, the content of my app was styled and the background matched the icon I was using. This means all I have to do is the navbar which still turned out to be quite the hassle getting it to look nice.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{}),`<nav>\n  <div class=\"navbar\">\n    <img src=\"/images/favicon.ico\" alt=\"Teddy Bear Repair Logo\">\n      <% if logged_in? %>\n        <a href=\"/user/dashboard\">Dashboard</a>\n        <a href=\"/user/dashboard/edit\">Edit User</a>\n        <a href=\"/logout\">Logout</a>\n      <% else %>\n        <a href=\"/login\">Login</a>\n        <a href=\"/user/new\">Register</a>\n      <% end %>\n  </div>\n</nav>\n`)),mdx(\"p\",null,\"This is what I had to work with. A simple div containing links and the logo. Easy enough I figured I could do it all in the nav selector. well theres a little more that would go into it.\"),mdx(\"p\",null,\"To get a nice background for the bar I added it to the nav selector. I also got rid of padding, margin, and overflow.\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{}),`nav {\n    background: #eee;\n    margin: 0;\n    padding: 0;\n    overflow: none;\n}\n`)),mdx(\"p\",null,\"Then moving on to make sure everything was nice and centered I added a flex display to the div inside\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{}),`nav div.navbar {\n    display: flex;\n    align-items: center;\n}\n`)),mdx(\"p\",null,\"Now at this point I have a bar with a white background with some links going across it. At this point I need to style the links so lets move on to the selector nav a\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{}),`nav a {\n    display: block;\n    color: #333;\n    padding: 16px;\n    text-decoration: none;\n}\n`)),mdx(\"p\",null,\"Here I set the display to block which makes the whole area clickable and the text color to black with a padding of 16px on each block. I also removed any text decoration.\"),mdx(\"p\",null,\"At this point everything is looking nice but it could be a little better so lets invert the link when hovered over. Luckily, CSS makes this very simple with its relative selectors making something like this possible \"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{}),`nav a:hover {\n    background-color: #333;\n    color: #eee;\n}\n`)),mdx(\"p\",null,\"So that was nice and painless and makes me ready to move forward with a little more \",mdx(\"em\",{parentName:\"p\"},\"creative\"),\" elements in my future projects.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}